using System.Collections.Generic;

namespace Twitch.Extensions.Base.Models
{
    /// <summary>
    /// The payload of a Twitch JWT Token send via extensions
    /// </summary>
    public class TwitchJWTTokenPayloadModel
    {
        /// <summary>
        /// Numeric ID of the channel from which your front-end is being served.
        /// </summary>
        public string channel_id { get; set; }
        /// <summary>
        /// The user’s Twitch user ID. This is provided only for users who allow your extension to identify them. There are no guarantees this will be available, as users can revoke an extension's ability to identify them at any time. Users who revoke an extension's ability to identify them are issued a new opaque identifier.
        /// </summary>
        public string user_id { get; set; }
        /// <summary>
        /// Identifies the session using this JWT. Any token generated by your EBS should leave this field blank. When present, the value is interpreted as follows:
        /// - Values beginning with "U" are stable references to a Twitch account across sessions and channels. You can use them to provide persistent services to users.
        /// - Values beginning with "A" are transient references to an anonymous Twitch session; the user has not logged into the Twitch website. These values are not stable and should never be associated with persistent data. It is possible for them to represent different users over time. If your extension requires a stable user identity, your front-end interface should display an appropriate login request when this field does not begin with "U."
        /// Broadcasters’ tokens are set with "U" + their Twitch user IDs, to avoid confusing opaque IDs with user IDs when the broadcaster is a viewer.
        /// </summary>
        public string opaque_user_id { get; set; }
        /// <summary>
        /// true when the token is for a user that previously shared identity; otherwise, false.
        /// </summary>
        public bool is_unlinked { get; set; }

        /// <summary>
        /// Type of user for whom this JWT has been signed. This is required. Valid values:
        /// - broadcaster — The owner of the channel, who should have configuration rights.
        /// - moderator — A viewer who has moderation rights on the channel.This is provided only for users who allow your extension to identify them.
        /// - viewer — A user watching the channel.
        /// - external — The token is not from a Twitch token generator. Your EBS should use this value to generate tokens when it broadcasts messages. Multiple endpoints require this role.
        /// </summary>
        public string role { get; set; }
        /// <summary>
        /// Defines the ability of the token holder to send and listen to messages for your extension. pubsub_perms contains two arrays: listen and send, which contain the topics the associated user is allowed to listen to and publish to, respectively.
        /// 
        /// A wildcard/asterisk means the associated user can listen/publish to all topics associated with that extension/channel combination. A list of specific values means only the specified targets are allowed. If a permission is absent, it is equivalent to the empty listing: there are no default allowed targets. When sending messages from the EBS, specify an asterisk as the send permission, to allow the message to pass through the system.
        /// </summary>
        public Dictionary<string, List<string>> pubsub_perms { get; set; } = new Dictionary<string, List<string>>();

        /// <summary>
        /// Expiration time for the JWT, expressed as seconds since Jan 1, 1970. (For a definition of NumericDate, see Terminology in the JWT RFC.)
        /// </summary>
        public long exp { get; set; }

        /// <summary>
        /// Creates a new instance of the TwitchJWTTokenPayloadModel class.
        /// </summary>
        public TwitchJWTTokenPayloadModel() { }

        /// <summary>
        /// Whether the user is a broadcaster.
        /// </summary>
        public bool IsBroadcaster { get { return !string.IsNullOrEmpty(this.role) && this.role.Equals("broadcaster"); } }

        /// <summary>
        /// Whether the user shared their public user ID
        /// </summary>
        public bool HasPublicUserID { get { return !string.IsNullOrEmpty(this.user_id); } }
    }
}
